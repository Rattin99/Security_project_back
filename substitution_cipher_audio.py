# -*- coding: utf-8 -*-
"""substitution_cipher_audio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/175uxYyMZmX6IhTIZdH2UNRK8bl7E9W4U
"""

import random
import wave

# Load the audio file
input_audio = "input_audio.wav"
output_encrypted_audio = "encrypted_audio.wav"
output_decrypted_audio = "decrypted_audio.wav"

# Read the audio file
with wave.open(input_audio, "rb") as audio_file:
    params = audio_file.getparams()
    audio_data = audio_file.readframes(params.nframes)

# Define a substitution key
substitution_key = {}
for i in range(256):
    substitution_key[i] = random.randint(0, 255)

# Encrypt the audio using substitution cipher
encrypted_audio_data = bytes([substitution_key[byte] for byte in audio_data])

# Save the encrypted audio
with wave.open(output_encrypted_audio, "wb") as encrypted_audio_file:
    encrypted_audio_file.setparams(params)
    encrypted_audio_file.writeframes(encrypted_audio_data)

print("Audio encrypted and saved as encrypted_audio.wav")

# Decrypt the audio using the same substitution key
inverse_substitution_key = {v: k for k, v in substitution_key.items()}
decrypted_audio_data = bytes([inverse_substitution_key[byte] for byte in encrypted_audio_data])

# Save the decrypted audio
with wave.open(output_decrypted_audio, "wb") as decrypted_audio_file:
    decrypted_audio_file.setparams(params)
    decrypted_audio_file.writeframes(decrypted_audio_data)

print("Audio decrypted and saved as decrypted_audio.wav")