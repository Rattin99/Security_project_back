# -*- coding: utf-8 -*-
"""Subtitution_cipher_text.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CzvnfRkLK_mkQiBnrKMUA-fK4G1JOJ7D
"""

import random
import string

# Function to create a shuffled key
def create_shuffled_key(key):
    chars = string.printable
    shuffled_key = list(chars)
    random.shuffle(shuffled_key)

    index_map = {}
    for i, char in enumerate(chars):
        index_map[char] = shuffled_key[i]

    encrypted_key = ''.join([index_map[char] for char in key if char in index_map])
    return encrypted_key, index_map

# Function to perform encryption using a substitution cipher
def encrypt(plain_text, index_map):
    cipher_text = ""

    for letter in plain_text:
        if letter in index_map:
            cipher_text += index_map[letter]

    return cipher_text

# Function to perform decryption using a substitution cipher
def decrypt(cipher_text, index_map):
    chars = string.printable
    plain_text = ""

    for letter in cipher_text:
        if letter in index_map.values():
            index = list(index_map.values()).index(letter)
            plain_text += chars[index]

    return plain_text

# Get user input for key and plaintext
key = input("Enter the key: ")
plain_text = input("Enter the plaintext: ")

# Create a shuffled key based on user input
shuffled_key, index_map = create_shuffled_key(key)

# Encrypt the plaintext using the shuffled key
cipher_text = encrypt(plain_text, index_map)

# Decrypt the cipher text using the original key
decrypted_text = decrypt(cipher_text, index_map)

# Display the results
print(f"Original Key    : {key}")
print(f"Shuffled Key    : {shuffled_key}")
print(f"Plaintext       : {plain_text}")
print(f"Ciphertext      : {cipher_text}")
print(f"Decrypted Text  : {decrypted_text}")



