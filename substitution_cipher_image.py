# -*- coding: utf-8 -*-
"""substitution_cipher_image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YnEXtuZRpJ5mVk0Iy93RJhIOjPQdk1Wc
"""

from PIL import Image
import random

# Load the image
input_image = "input_image.png"
output_encrypted_image = "encrypted_image.png"
output_decrypted_image = "decrypted_image.png"
image = Image.open(input_image)

# Define a substitution key
substitution_key = {}
for i in range(256):
    substitution_key[i] = random.randint(0, 255)

# Encrypt the image using substitution cipher
encrypted_pixels = [substitution_key[pixel] for pixel in image.tobytes()]
encrypted_image = Image.frombytes(image.mode, image.size, bytes(encrypted_pixels))
encrypted_image.save(output_encrypted_image)
print("Image encrypted and saved as encrypted_image.png")

# Decrypt the image using the same substitution key
inverse_substitution_key = {v: k for k, v in substitution_key.items()}
decrypted_pixels = [inverse_substitution_key[pixel] for pixel in encrypted_image.tobytes()]
decrypted_image = Image.frombytes(encrypted_image.mode, encrypted_image.size, bytes(decrypted_pixels))
decrypted_image.save(output_decrypted_image)
print("Image decrypted and saved as decrypted_image.png")